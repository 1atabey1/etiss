#
#	Copyright 2018 Infineon Technologies AG
#
#	This file is part of ETISS tool, see <https://gitlab.lrz.de/de-tum-ei-eda-open/etiss>
#
#	The initial version of this software has been created with the funding support by the German Federal
#	Ministry of Education and Research(BMBF) in the project EffektiV under grant 01IS13022.
#
#	Redistribution and use in source and binary forms, with or without modification, are permitted
#	provided that the following conditions are met:
#
#	1. Redistributions of source code must retain the above copyright notice, this list of conditions and
#	the following disclaimer.
#
# 	2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions
#	and the following disclaimer in the documentation and / or other materials provided with the distribution.
#
# 	3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse
# 	or promote products derived from this software without specific prior written permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
#	WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
#	PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
#	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO,
#	PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#	HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING
#	NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Author: Marc Greim <marc.greim@mytum.de>, Chair of Electronic Design Automation, TUM
#
#	Version 0.2
#

# This Makefile is used by the ETISS SW-example and the systemC example,
# which has its own software.

TOOLBUILD ?= rvtc-ilp32-multlib-1.0.0.0
ifeq ($(TOOLBIN),)
ifeq ($(shell uname),Linux)
   ifeq ($(shell lsb_release -is),RedHatEnterpriseServer)
       TOOL_INSTALL_ROOT=/home/aifordes.work/share
   else
       TOOL_INSTALL_ROOT=/opt
   endif
else
    TOOL_INSTALL_ROOT=/c/Inicio/tools/64
endif
TOOLBIN:=$(TOOL_INSTALL_ROOT)/$(TOOLBUILD)/bin
endif


RAM_SIZE_KB ?= 1024
ROM_SIZE_KB ?= 4096
STACK_SIZE_KB ?= 128
GCC_BUILD_VARIANT=riscv32-unknown-elf
TARGET_ABI ?= ilp32
TARGET_ARCH ?= rv32im
TARGET_ELF_FMT=elf32-littleriscv
LD_EMULATION=elf32lriscv

define path_prefix_call =
@echo $(1)
@$(SET_PATH) $(1)
endef

SET_PATH=PATH='$(TOOLBIN):$(PATH)'
RISCVCC=$(TOOLBIN)/$(GCC_BUILD_VARIANT)-gcc -mabi=$(TARGET_ABI) -march=$(TARGET_ARCH)   -Wl,--no-relax -nostartfiles  -fno-builtin  -ffreestanding
PATHED_RISCVCC=$(SET_PATH) $(RISCVCC)
RISCVCPP=$(TOOLBIN)/$(GCC_BUILD_VARIANT)-g++  -march=$(TARGET_ARCH) -mabi=$(TARGET_ABI) -Wl,--no-relax -nostartfiles  -fno-builtin  -ffreestanding
PATHED_RISCVCPP=$(SET_PATH) $(RISCVCPP)
RISCVOBJCPY=$(TOOLBIN)/$(GCC_BUILD_VARIANT)-objcopy
RISCVOBJDMP= $(TOOLBIN)/$(GCC_BUILD_VARIANT)-objdump
RISCVRDELF=$(TOOLBIN)/$(GCC_BUILD_VARIANT)-readelf
RISCVSIZE=$(TOOLBIN)/$(GCC_BUILD_VARIANT)-size
RISCVLD=$(TOOLBIN)/$(GCC_BUILD_VARIANT)-ld
PATHED_RISCVLD=$(SET_PATH) $(RISCVLD)


DEBUG?=1

ifeq ($(DEBUG),0)
	DBGPARAM =
	OPTLEVEL?=-O3
else
	DBGPARAM =-g
	OPTLEVEL?=-O3
endif

# The following paths will be inserted by CMake while installing ETISS.
# As they are absolute, it doesn't matter where the Makefile is executed,
# the only condition is that main.c lies in the same directory as this Makefile.

# The object and executable files will be put in the obj and build
# subdirectories, respectively.

SW_DIR = $(dir $(CURDIR))
SW_DIR_TCS = $(SW_DIR)/test_cases/
SW_DIR_RISCV = $(SW_DIR)/riscv_cpp/

BUILD_DIR = ./build
OBJECT_DIR = ./obj
C_CXX_FLAGS = $(DBGPARAM) $(OPTLEVEL)  -I ${SW_DIR} -I ${SW_DIR}/sys_lib/inc -I ${SW_DIR}/string_lib/inc 
CFLAGS = $(C_CXX_FLAGS) -std=gnu99
CXXFLAGS = $(C_CXX_FLAGS)
LDFLAGS = -T ${SW_DIR_RISCV}/link.ld

all: mkdirs ${BUILD_DIR}/code.elf ${BUILD_DIR}/code.bin ${BUILD_DIR}/code.txt romram


mkdirs:
	mkdir -p $(BUILD_DIR)
	mkdir -p $(OBJECT_DIR)

#Note: Add other source files here.
SYSLIB_SRC = ${SW_DIR}/sys_lib/src/int.c \
	     ${SW_DIR}/sys_lib/src/uart.c \
	     ${SW_DIR}/sys_lib/src/exceptions.c# $(wildcard ${SW_DIR_RISCV}/sys_lib/src/*.c)

SYSLIB_OBJ = ${SYSLIB_SRC:.c=.o}

BOOT_ENTRY = ${SW_DIR_RISCV}/crt0.riscv.S

TEST_OBJ = \
  ${OBJECT_DIR}/print_.o \
  ${OBJECT_DIR}/aes_.o \
  ${OBJECT_DIR}/edge_.o \
  ${OBJECT_DIR}/fir_.o \
  ${OBJECT_DIR}/iir_.o \
  ${OBJECT_DIR}/pi_.o \
  ${OBJECT_DIR}/heap_.o \
  ${OBJECT_DIR}/isort_.o \
  ${OBJECT_DIR}/jdct_.o \
  ${OBJECT_DIR}/test_.o  \

LIBS_OBJ = \
	${OBJECT_DIR}/sys_lib.o \
	${OBJECT_DIR}/syscalls.o \
	#${OBJECT_DIR}/string_lib.o

${BUILD_DIR}/code.elf: mkdirs main.cpp ${BOOT_ENTRY} ${TEST_OBJ} ${LIBS_OBJ}
	sed -e'1,$$s/@RAM_SIZE_KB@/$(RAM_SIZE_KB)/g' -e'1,$$s/@ROM_SIZE_KB@/$(ROM_SIZE_KB)/g' -e'1,$$s/@STACK_SIZE_KB@/$(STACK_SIZE_KB)/g' link.ld.in > link.ld
	$(call path_prefix_call, $(RISCVCPP) $(LDFLAGS) $(CXXFLAGS) ${BOOT_ENTRY} main.cpp -o ${BUILD_DIR}/code.elf ${TEST_OBJ} ${LIBS_OBJ})
	$(RISCVSIZE) ${BUILD_DIR}/code.elf

#@echo $(RISCVCPP) $(CFLAGS) ${BOOT_ENTRY} main.cpp -o ${BUILD_DIR}/code.elf ${TEST_OBJ} ${LIBS_OBJ}
#@$(PATHED_RISCVCPP) $(CFLAGS) ${BOOT_ENTRY} main.cpp -o ${BUILD_DIR}/code.elf ${TEST_OBJ} ${LIBS_OBJ}

${BUILD_DIR}/code.bin: ${BUILD_DIR}/code.elf
	$(call path_prefix_call, $(RISCVOBJCPY) ${BUILD_DIR}/code.elf --output-target=binary ${BUILD_DIR}/code.bin)

${BUILD_DIR}/code.disasm: ${BUILD_DIR}/code.elf
	$(call path_prefix_call, $(RISCVOBJDMP) -S -D ${BUILD_DIR}/code.elf > ${BUILD_DIR}/code.disasm)

${BUILD_DIR}/code.txt: ${BUILD_DIR}/code.elf
	@echo CODE
	$(call path_prefix_call, $(RISCVRDELF) -a ${BUILD_DIR}/code.elf > ${BUILD_DIR}/code.txt)

# This generates a seperate file to go into rom and ram memory
# The offsets must corespond to the offsets in the linker script converted to decimal
# Example: linker script rom size 0x0080000 = count=524288 (copies beginning of hex file for rom)
# 	   linker script ram begins at 0x18000000 = skip=402653184 (copies everything starting from 0x18000000)
romram: ${BUILD_DIR}/code.bin
	dd bs=1024 count=$(ROM_SIZE_KB) if=$(BUILD_DIR)/code.bin of=$(BUILD_DIR)/code.rom
	dd bs=1024 skip=$(ROM_SIZE_KB) if=$(BUILD_DIR)/code.bin of=$(BUILD_DIR)/code.ram



${OBJECT_DIR}/print_.o: ${SW_DIR_TCS}/cust_print/cust_print.c
	@echo $(RISCVCC) $(CFLAGS) -c $< -o $@
	@$(PATHED_RISCVCC) $(CFLAGS) -c $< -o $@

${OBJECT_DIR}/aes_.o: ${SW_DIR_TCS}/aes/aes.c ${OBJECT_DIR}/print_.o
	@echo $(RISCVCC) $(CFLAGS) -c $< -o $@
	@$(PATHED_RISCVCC) $(CFLAGS) -c $< -o $@

${OBJECT_DIR}/edge_.o: ${SW_DIR_TCS}/edge/edge.c ${OBJECT_DIR}/print_.o
	@echo $(RISCVCC) $(CFLAGS) -c $< -o $@
	@$(PATHED_RISCVCC) $(CFLAGS) -c $< -o $@

${OBJECT_DIR}/fir_.o: ${SW_DIR_TCS}/fir/fir.c ${OBJECT_DIR}/print_.o
	@echo $(RISCVCC) $(CFLAGS) -c $< -o $@
	@$(PATHED_RISCVCC) $(CFLAGS) -c $< -o $@

${OBJECT_DIR}/iir_.o: ${SW_DIR_TCS}/iir/iir.c ${OBJECT_DIR}/print_.o
	@echo $(RISCVCC) $(CFLAGS) -c $< -o $@
	@$(PATHED_RISCVCC) $(CFLAGS) -c $< -o $@

${OBJECT_DIR}/heap_.o: ${SW_DIR_TCS}/heap/heap.c ${OBJECT_DIR}/print_.o
	@echo $(RISCVCC) $(CFLAGS) -c $< -o $@
	@$(PATHED_RISCVCC) $(CFLAGS) -c $< -o $@

${OBJECT_DIR}/isort_.o: ${SW_DIR_TCS}/isort/isort.c ${OBJECT_DIR}/print_.o
	@echo $(RISCVCC) $(CFLAGS) -c $< -o $@
	@$(PATHED_RISCVCC) $(CFLAGS) -c $< -o $@

${OBJECT_DIR}/jdct_.o: ${SW_DIR_TCS}/jdct/jdct.c ${OBJECT_DIR}/print_.o
	@echo $(RISCVCC) $(CFLAGS) -c $< -o $@
	@$(PATHED_RISCVCC) $(CFLAGS) -c $< -o $@

${OBJECT_DIR}/pi_.o: ${SW_DIR_TCS}/pi/pi.c ${OBJECT_DIR}/print_.o
	@echo $(RISCVCC) $(CFLAGS) -c $< -o $@
	@$(PATHED_RISCVCC) $(CFLAGS) -c $< -o $@

${OBJECT_DIR}/test_.o: ${SW_DIR_TCS}/simple_tests/test.c ${OBJECT_DIR}/print_.o
	@echo $(RISCVCC) $(CFLAGS) -c $< -o $@
	@$(PATHED_RISCVCC) $(CFLAGS) -c $< -o $@

${OBJECT_DIR}/syscalls.o: syscalls.c
	@echo $(RISCVCC) $(CFLAGS) -c $< -o $@
	@$(PATHED_RISCVCC) $(CFLAGS) -c $< -o $@

${SW_DIR}/sys_lib/src/%.o: ${SW_DIR}/sys_lib/src/%.c
	@echo $(RISCVCC) $(CFLAGS) -c $< -o $@
	rm -f $@
	@$(PATHED_RISCVCC) $(CFLAGS) -o $@ -c $<

${OBJECT_DIR}/sys_lib.o: ${SYSLIB_OBJ}
	@echo $(RISCVLD) $^ -o $@
	@$(PATHED_RISCVLD) $^ -o $@
	rm -f ${SYSLIB_OBJ}


#${OBJECT_DIR}/string_lib.o: ${STRINGLIB_SRC} ${OBJECT_DIR}/sys_lib.o
#	$(PATHED_RISCVCC) $(CFLAGS) -o $@ -c $^

clean:
	rm -rf ${OBJECT_DIR}
	rm -rf ${BUILD_DIR}
	rm -f ${SYSLIB_OBJ}
